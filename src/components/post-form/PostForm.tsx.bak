import React, { useCallback } from 'react'
import { useForm } from 'react-hook-form'
import Button from '../Button'
import Input from '../Input'
import RTE from '../RTE'
import Select from '../Select'
import service from '../../appwrite/service'
import { UseSelector, useSelector } from 'react-redux'
import { useNavigate } from 'react-router-dom'
import type { RootState } from '../../store/store'

interface PostProps {
  $id: string
  title: string
  slug: string
  content: string
  featuredImage: string
  status: string
}

interface PostFormProps {
  post?: PostProps
}

const PostForm: React.FC<PostFormProps> = ({ post }) => {
  const { register, handleSubmit, watch, setValue, control, getValues } =
    useForm({
      defaultValues: {
        title: post?.title || '',
        slug: post?.slug || '',
        content: post?.content || '',
        status: post?.status || 'active',
      },
    })
  const navigate = useNavigate()
  const userData = useSelector((state: RootState) => state.auth.userData)
  const submit = async (data: any) => {
    if (post) {
      const file = data.image[0]
        ? await service.createFile(data.image[0])
        : null
      if (file) {
        service.deleteFile(post.featuredImage)
      }
      const dbPost = await service.updateDocument(post.$id, {
        ...data,
        featuredImage: file ? file.$id : undefined,
      })
      if (dbPost) {
        navigate(`/post/${dbPost.$id}`)
      }
    } else {
      const file = await service.createFile(data.image[0])
      if (file) {
        const fileId = file.$id
        data.featuredImage = fileId
        const dbPost = await service.creatDocument({
          ...data,
          userId: userData.$id,
        })
        if (dbPost) {
          navigate(`/post/${dbPost.$id}`)
        }
      }
    }
  }
  const slugTransform = useCallback((value: string | undefined) => {
    return value
      ? value
          .trim()
          .toLowerCase()
          .replace(/[^a-zA-Z\d\s]+/g, '-')
          .replace(/\s/g, '-')
      : ''
  }, [])
  React.useEffect(() => {
    watch((value, { name }) => {
      if (name === 'title') {
        setValue('slug', slugTransform(value.title), { shouldValidate: true })
      }
    })
  }, [watch, slugTransform, setValue])

  return <></>
}

export default PostForm
